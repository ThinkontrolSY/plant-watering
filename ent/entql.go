// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plant-watering/ent/waterlog"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   waterlog.Table,
			Columns: waterlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: waterlog.FieldID,
			},
		},
		Type: "WaterLog",
		Fields: map[string]*sqlgraph.FieldSpec{
			waterlog.FieldSeconds: {Type: field.TypeInt32, Column: waterlog.FieldSeconds},
			waterlog.FieldChannel: {Type: field.TypeString, Column: waterlog.FieldChannel},
			waterlog.FieldManual:  {Type: field.TypeBool, Column: waterlog.FieldManual},
			waterlog.FieldTime:    {Type: field.TypeTime, Column: waterlog.FieldTime},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (wlq *WaterLogQuery) addPredicate(pred func(s *sql.Selector)) {
	wlq.predicates = append(wlq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the WaterLogQuery builder.
func (wlq *WaterLogQuery) Filter() *WaterLogFilter {
	return &WaterLogFilter{config: wlq.config, predicateAdder: wlq}
}

// addPredicate implements the predicateAdder interface.
func (m *WaterLogMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the WaterLogMutation builder.
func (m *WaterLogMutation) Filter() *WaterLogFilter {
	return &WaterLogFilter{config: m.config, predicateAdder: m}
}

// WaterLogFilter provides a generic filtering capability at runtime for WaterLogQuery.
type WaterLogFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *WaterLogFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *WaterLogFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(waterlog.FieldID))
}

// WhereSeconds applies the entql int32 predicate on the seconds field.
func (f *WaterLogFilter) WhereSeconds(p entql.Int32P) {
	f.Where(p.Field(waterlog.FieldSeconds))
}

// WhereChannel applies the entql string predicate on the channel field.
func (f *WaterLogFilter) WhereChannel(p entql.StringP) {
	f.Where(p.Field(waterlog.FieldChannel))
}

// WhereManual applies the entql bool predicate on the manual field.
func (f *WaterLogFilter) WhereManual(p entql.BoolP) {
	f.Where(p.Field(waterlog.FieldManual))
}

// WhereTime applies the entql time.Time predicate on the time field.
func (f *WaterLogFilter) WhereTime(p entql.TimeP) {
	f.Where(p.Field(waterlog.FieldTime))
}
