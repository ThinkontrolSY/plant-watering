// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"plant-watering/ent/waterlog"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WaterLogCreate is the builder for creating a WaterLog entity.
type WaterLogCreate struct {
	config
	mutation *WaterLogMutation
	hooks    []Hook
}

// SetSeconds sets the "seconds" field.
func (wlc *WaterLogCreate) SetSeconds(i int32) *WaterLogCreate {
	wlc.mutation.SetSeconds(i)
	return wlc
}

// SetChannel sets the "channel" field.
func (wlc *WaterLogCreate) SetChannel(s string) *WaterLogCreate {
	wlc.mutation.SetChannel(s)
	return wlc
}

// SetManual sets the "manual" field.
func (wlc *WaterLogCreate) SetManual(b bool) *WaterLogCreate {
	wlc.mutation.SetManual(b)
	return wlc
}

// SetTime sets the "time" field.
func (wlc *WaterLogCreate) SetTime(t time.Time) *WaterLogCreate {
	wlc.mutation.SetTime(t)
	return wlc
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (wlc *WaterLogCreate) SetNillableTime(t *time.Time) *WaterLogCreate {
	if t != nil {
		wlc.SetTime(*t)
	}
	return wlc
}

// SetID sets the "id" field.
func (wlc *WaterLogCreate) SetID(u uuid.UUID) *WaterLogCreate {
	wlc.mutation.SetID(u)
	return wlc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wlc *WaterLogCreate) SetNillableID(u *uuid.UUID) *WaterLogCreate {
	if u != nil {
		wlc.SetID(*u)
	}
	return wlc
}

// Mutation returns the WaterLogMutation object of the builder.
func (wlc *WaterLogCreate) Mutation() *WaterLogMutation {
	return wlc.mutation
}

// Save creates the WaterLog in the database.
func (wlc *WaterLogCreate) Save(ctx context.Context) (*WaterLog, error) {
	wlc.defaults()
	return withHooks(ctx, wlc.sqlSave, wlc.mutation, wlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wlc *WaterLogCreate) SaveX(ctx context.Context) *WaterLog {
	v, err := wlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wlc *WaterLogCreate) Exec(ctx context.Context) error {
	_, err := wlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wlc *WaterLogCreate) ExecX(ctx context.Context) {
	if err := wlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wlc *WaterLogCreate) defaults() {
	if _, ok := wlc.mutation.Time(); !ok {
		v := waterlog.DefaultTime()
		wlc.mutation.SetTime(v)
	}
	if _, ok := wlc.mutation.ID(); !ok {
		v := waterlog.DefaultID()
		wlc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wlc *WaterLogCreate) check() error {
	if _, ok := wlc.mutation.Seconds(); !ok {
		return &ValidationError{Name: "seconds", err: errors.New(`ent: missing required field "WaterLog.seconds"`)}
	}
	if _, ok := wlc.mutation.Channel(); !ok {
		return &ValidationError{Name: "channel", err: errors.New(`ent: missing required field "WaterLog.channel"`)}
	}
	if _, ok := wlc.mutation.Manual(); !ok {
		return &ValidationError{Name: "manual", err: errors.New(`ent: missing required field "WaterLog.manual"`)}
	}
	if _, ok := wlc.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "WaterLog.time"`)}
	}
	return nil
}

func (wlc *WaterLogCreate) sqlSave(ctx context.Context) (*WaterLog, error) {
	if err := wlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wlc.mutation.id = &_node.ID
	wlc.mutation.done = true
	return _node, nil
}

func (wlc *WaterLogCreate) createSpec() (*WaterLog, *sqlgraph.CreateSpec) {
	var (
		_node = &WaterLog{config: wlc.config}
		_spec = sqlgraph.NewCreateSpec(waterlog.Table, sqlgraph.NewFieldSpec(waterlog.FieldID, field.TypeUUID))
	)
	if id, ok := wlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wlc.mutation.Seconds(); ok {
		_spec.SetField(waterlog.FieldSeconds, field.TypeInt32, value)
		_node.Seconds = value
	}
	if value, ok := wlc.mutation.Channel(); ok {
		_spec.SetField(waterlog.FieldChannel, field.TypeString, value)
		_node.Channel = value
	}
	if value, ok := wlc.mutation.Manual(); ok {
		_spec.SetField(waterlog.FieldManual, field.TypeBool, value)
		_node.Manual = value
	}
	if value, ok := wlc.mutation.Time(); ok {
		_spec.SetField(waterlog.FieldTime, field.TypeTime, value)
		_node.Time = value
	}
	return _node, _spec
}

// WaterLogCreateBulk is the builder for creating many WaterLog entities in bulk.
type WaterLogCreateBulk struct {
	config
	err      error
	builders []*WaterLogCreate
}

// Save creates the WaterLog entities in the database.
func (wlcb *WaterLogCreateBulk) Save(ctx context.Context) ([]*WaterLog, error) {
	if wlcb.err != nil {
		return nil, wlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wlcb.builders))
	nodes := make([]*WaterLog, len(wlcb.builders))
	mutators := make([]Mutator, len(wlcb.builders))
	for i := range wlcb.builders {
		func(i int, root context.Context) {
			builder := wlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WaterLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wlcb *WaterLogCreateBulk) SaveX(ctx context.Context) []*WaterLog {
	v, err := wlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wlcb *WaterLogCreateBulk) Exec(ctx context.Context) error {
	_, err := wlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wlcb *WaterLogCreateBulk) ExecX(ctx context.Context) {
	if err := wlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
