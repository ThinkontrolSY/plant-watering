package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"log"
	"plant-watering/graph/model"

	"github.com/spf13/viper"
)

// Water is the resolver for the water field.
func (r *mutationResolver) Water(ctx context.Context, input model.WateringInput) (bool, error) {
	log.Printf("Watering plant %s", input.Channel)
	if w, ok := r.waterIOs[input.Channel]; ok {
		if err := w.Watering(input.Seconds); err != nil {
			return false, fmt.Errorf("failed to water: %v", err)
		} else {
			log.Printf("Watering %s: %d", input.Channel, input.Seconds)
			if s, ok := r.statictics[input.Channel]; ok {
				s.ManualWatering += input.Seconds
			}
			return true, nil
		}
	} else {
		return false, fmt.Errorf("channel %s not found", input.Channel)
	}
}

// SetBaseTime is the resolver for the setBaseTime field.
func (r *mutationResolver) SetBaseTime(ctx context.Context, baseTime int32) (bool, error) {
	r.baseTime = baseTime
	r.weather.CalculateWateringSeconds(baseTime)
	viper.Set("baseTime", baseTime)
	err := viper.WriteConfig()
	if err != nil {
		log.Printf("Failed to write config: %v", err)
	}
	return true, nil
}

// Channels is the resolver for the channels field.
func (r *queryResolver) Channels(ctx context.Context) ([]string, error) {
	return []string{"N1", "N2"}, nil
}

// Weather is the resolver for the weather field.
func (r *queryResolver) Weather(ctx context.Context) (*Weather, error) {
	return r.weather, nil
}

// WaterStatistic is the resolver for the waterStatistic field.
func (r *queryResolver) WaterStatistic(ctx context.Context, channel string) (*WaterStatistic, error) {
	return r.statictics[channel], nil
}

// BaseTime is the resolver for the baseTime field.
func (r *weatherResolver) BaseTime(ctx context.Context, obj *Weather) (int32, error) {
	return r.baseTime, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Weather returns WeatherResolver implementation.
func (r *Resolver) Weather() WeatherResolver { return &weatherResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type weatherResolver struct{ *Resolver }
